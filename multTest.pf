@test
subroutine singular_matrices_test()
    use M
    use pfunit_mod
    implicit none
    real(kind=8) :: f(1,1), s(1,1), r(1,1), e(1,1)
    integer (kind=4) :: status
    f = 1.8
    s = 0.8
    call mm(f,s, r, status)
    e = matmul(f,s)
    @assertEqual(status, 0)
    @assertEqual(r,e)
end    

@test
subroutine vectors_multiplication_test()
    use M
    use pfunit_mod
    implicit none
    real(kind=8) :: f(1,100), s(100,1), r(1,1), e(1,1)
    integer (kind=4) :: status
    f = 1.8
    s = 0.8
    call mm(f,s, r, status)
    e = matmul(f,s)
    @assertEqual(status, 0)
    @assertEqual(r,e)
end    

@test
subroutine square_matrices_test()
    use M
    use pfunit_mod
    implicit none
    real(kind=8) :: f(10,10), s(10,10), r(10,10), e(10,10)
    integer (kind=4) :: status
    f = 1.8
    s = 0.8
    call mm(f,s, r, status)
    e = matmul(f,s)
    @assertEqual(status, 0)
    @assertEqual(r,e)
end    

@test
subroutine large_matrices_test()
    use M
    use pfunit_mod
    implicit none
    real(kind=8) :: f(500,500), s(500,500), r(500,500), e(500,500)
    integer (kind=4) :: status
    f = 1.8
    s = 0.8
    call mm(f,s, r, status)
    e = matmul(f,s)
    @assertEqual(status, 0)
    @assertEqual(r,e)
end    

@test
subroutine rectangular_matrices_test()
    use M
    use pfunit_mod
    implicit none
    real(kind=8) :: f(5,8), s(8,3), r(5,3), e(5,3)
    integer (kind=4) :: status
    f = 1.8
    s = 0.8
    call mm(f,s, r, status)
    e = matmul(f,s)
    @assertEqual(status, 0)
    @assertEqual(r,e)
end    

@test
subroutine wrong_input_test()
    use M
    use pfunit_mod
    implicit none
    real(kind=8) :: f(8,8), s(7,8), r(1,1), e(1,1)
    integer (kind=4) :: status
    f = 1.8
    s = 0.8
    call mm(f,s, r, status)
    @assertEqual(status, 1)
end    
